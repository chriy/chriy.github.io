"use strict";(self.webpackChunkchriy_github_io=self.webpackChunkchriy_github_io||[]).push([[477],{10:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/chriy/chriy.github.io/blog/welcome.md","source":"@site/blog/welcome.md","title":"Welcome","description":"Intro","date":"2022-05-11T15:18:03.000Z","formattedDate":"May 11, 2022","tags":[],"readingTime":0.26,"truncated":false,"authors":[],"frontMatter":{"slug":"welcome","title":"Welcome"},"nextItem":{"title":"OpenSSL\u81ea\u7b7e\u540d\u8bc1\u4e66","permalink":"/blog/2021/11/07/openssl"}},"content":"## Intro\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"/2021/11/07/openssl","metadata":{"permalink":"/blog/2021/11/07/openssl","editUrl":"https://github.com/chriy/chriy.github.io/blog/2021-11-07-openssl.md","source":"@site/blog/2021-11-07-openssl.md","title":"OpenSSL\u81ea\u7b7e\u540d\u8bc1\u4e66","description":"\u5229\u7528openssl\u9881\u53d1\u672c\u5730SSL\u8bc1\u4e66.  \u4ee5\u4e0b\u811a\u672c\u6765\u81ea github  \u7565\u6709\u6539\u52a8","date":"2021-11-07T00:00:00.000Z","formattedDate":"November 7, 2021","tags":[],"readingTime":6.32,"truncated":false,"authors":[],"frontMatter":{"title":"OpenSSL\u81ea\u7b7e\u540d\u8bc1\u4e66"},"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"npm\u7684\u4f7f\u7528\u65b9\u6cd5","permalink":"/blog/2019/11/08/npm"}},"content":">\u5229\u7528openssl\u9881\u53d1\u672c\u5730SSL\u8bc1\u4e66.  \u4ee5\u4e0b\u811a\u672c\u6765\u81ea [github](https://github.com/etdey/ssl.ca)  \u7565\u6709\u6539\u52a8\\n\\n\u751f\u6210\u8bc1\u4e66\u4e00\u5171\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65:\\n\\n1. \u751f\u6210\u6839\u8bc1\u4e66, \u8fd9\u4e2a\u662f\u7528\u6765\u5b89\u88c5\u5728\u8bbe\u5907\u4e2d, \u8ba9\u8bbe\u5907\u4fe1\u4efb\u81ea\u5df1\u9881\u53d1\u7684\u8bc1\u4e66,  \u6ce8: Window\u5b89\u88c5\u9700\u8981\u5b89\u88c5\u5230 **\u53d7\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u9881\u53d1\u673a\u6784**\\n2. \u521b\u5efa\u8bc1\u4e66\\n3. \u7b7e\u53d1\u8bc1\u4e66\\n\\n## 1. \u6839\u8bc1\u4e66\\n\\n`new-root-ca.sh`\\n\\n```bash\\n#!/bin/bash\\n##\\n##  new-root-ca.sh - create the root CA\\n##  Copyright (c) 2000 Yeak Nai Siew, All Rights Reserved.\\n##\\n\\nKEYBITS=4096\\nHASHALGO=\\"sha256\\"\\nVALID_DAYS=3650\\nRANDOM_SRC=/dev/urandom\\n\\n# Create the master CA key. This should be done once.\\nif [ ! -f ca.key ]; then\\n        echo \\"No Root CA key found. Generating one\\"\\n        openssl genrsa -aes256 -out ca.key -rand ${RANDOM_SRC} $KEYBITS\\n        echo \\"\\"\\nfi\\n\\n# Self-sign it.\\nCONFIG=\\"root-ca.conf\\"\\ncat >$CONFIG <<EOT\\n[ req ]\\ndefault_bits                    = $KEYBITS\\ndefault_keyfile                 = ca.key\\ndefault_md              = $HASHALGO\\ndistinguished_name              = req_distinguished_name\\nx509_extensions                 = v3_ca\\nstring_mask                     = nombstr\\nreq_extensions                  = v3_req\\n[ req_distinguished_name ]\\ncountryName                     = Country Name (2 letter code)\\ncountryName_default             = CN\\ncountryName_min                 = 2\\ncountryName_max                 = 2\\nstateOrProvinceName             = State or Province Name (full name)\\nlocalityName                    = Locality Name (eg, city)\\n0.organizationName              = Organization Name (eg, company)\\n0.organizationName_default      = Chriy Personal Certificate Authority\\norganizationalUnitName          = Organizational Unit Name (eg, section)\\norganizationalUnitName_default  = Certification Services Division\\ncommonName                      = Common Name (eg, MD Root CA)\\ncommonName_default              = Chriy Root CA\\ncommonName_max                  = 64\\nemailAddress                    = Email Address\\nemailAddress_max                = 40\\n[ v3_ca ]\\nbasicConstraints                = critical,CA:true\\nsubjectKeyIdentifier            = hash\\n[ v3_req ]\\nnsCertType                      = objsign,email,server\\nEOT\\n\\necho \\"Self-sign the root CA...\\"\\nopenssl req -new -x509 -days ${VALID_DAYS} -config $CONFIG -key ca.key -out ca.crt\\necho \\"complete.\\"\\nrm -f $CONFIG\\n```\\n\\n**\u6267\u884c\u8fd9\u6bb5\u811a\u672c\u540e, \u53ef\u4ee5\u6309\u63d0\u793a\u8f93\u5165\u4e00\u4e9b\u4fe1\u606f, \u5982: \u56fd\u5bb6, \u57ce\u5e02, \u7ec4\u7ec7, \u9881\u53d1\u673a\u6784\u7b49\u7b49, \u8fd9\u4e9b\u5c31\u662f\u5bf9\u5e94\u4e86\u8bc1\u4e66\u7684\u4e00\u4e9b\u4fe1\u606f**. \u63a5\u4e0b\u6765\u8fd8\u6709\u4e2a\u8f93\u5165\u5bc6\u7801\u7684\u8fc7\u7a0b, \u8fd9\u4e2a\u5bc6\u7801\u5bf9\u5e94\u540e\u9762\u7b7e\u53d1\u8bc1\u4e66\u65f6\u7684\u5bc6\u7801,  \u540e\u9762\u8981\u7528\u5230.\\n\\n\\n\\n## 2. \u521b\u5efa\u8bc1\u4e66\\n\\n`new-server-cert.sh`\\n\\n```shell\\n#!/bin/bash\\n##\\n##  new-server-cert.sh - create the server cert\\n##  Copyright (c) 2000 Yeak Nai Siew, All Rights Reserved.\\n##\\n\\nKEYBITS=4096\\nHASHALGO=\\"sha256\\"\\n\\n# Create the key. This should be done once per cert.\\nCN=$1\\nif [ $# -lt 1 ]; then\\n    echo \\"Usage: $0 <www.domain.com> [subjectAltName1 [san2 ...]]\\"\\n    exit 1\\nfi\\n\\n# force the CN to become a SAN even if no other SANs; Chrome compatibility\\nsubjectAltNames=\\"$*\\"\\n\\n# if private key exists, ask if we want to generate a new key\\nif [ -f $CN.key ]; then\\n    read -p \\"a key for this cn is already existing, generate a new one? \\" ANSWER\\n    if [ \\"$ANSWER\\" == \\"Y\\" ] || [ \\"$ANSWER\\" == \\"y\\" ]; then\\n        rm -f $CN.key\\n    fi\\nfi\\n\\nif [ ! -f $CN.key ]; then\\n    echo \\"No $CN.key found. Generating one\\"\\n    openssl genrsa -out $CN.key $KEYBITS\\n    echo \\"\\"\\nfi\\n\\n# Fill the necessary certificate data\\nCONFIG=\\"server-cert.conf\\"\\ncat >$CONFIG <<EOT\\n[ req ]\\ndefault_bits                    = $KEYBITS\\ndefault_keyfile                 = server.key\\ndefault_md                      = $HASHALGO\\ndistinguished_name              = req_distinguished_name\\nstring_mask                     = nombstr\\nreq_extensions                  = v3_req\\n[ req_distinguished_name ]\\ncountryName                     = Country Name (2 letter code)\\ncountryName_default             = CN\\ncountryName_min                 = 2\\ncountryName_max                 = 2\\nstateOrProvinceName             = State or Province Name (full name)\\nstateOrProvinceName_default     = Shanghai\\nlocalityName                    = Locality Name (eg, city)\\nlocalityName_default            = Shanghai\\n0.organizationName              = Organization Name (eg, company)\\n0.organizationName_default      = Chriy Personal Organization\\norganizationalUnitName          = Organizational Unit Name (eg, section)\\norganizationalUnitName_default  = Secure Server\\ncommonName                      = Common Name (eg, www.domain.com)\\ncommonName_default              = $CN\\ncommonName_max                  = 64\\nemailAddress                    = Email Address\\nemailAddress_max                = 40\\n[ v3_req ]\\nnsCertType                      = server\\nbasicConstraints                = critical,CA:false\\nkeyUsage                = nonRepudiation, digitalSignature, keyEncipherment\\nEOT\\n\\n# Handle optional Subject Alternate Names\\nif [ \\"$subjectAltNames\\" != \\"\\" ]; then\\n    echo \\"subjectAltName = @alt_names\\" >> $CONFIG\\n    echo \\"[alt_names]\\" >> $CONFIG\\n    numi=1\\n    numd=1\\n    cn_already_added=0\\n\\n    # CN is added to the SAN list automatically\\n    for san in $CN  $subjectAltNames; do\\n        # if CN has already been seen, skip it\\n        if [ \\"$san\\" = \\"$CN\\" ]; then\\n            if [ $cn_already_added -eq 0 ]; then\\n                cn_already_added=1\\n            else\\n                continue     #skip to next SAN\\n            fi\\n        fi\\n\\n        # determine if this looks like an IP or a DNS name\\n        echo $san | egrep \'^[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}$\' &> /dev/null\\n    if [ $? -eq 0 ]; then\\n            echo \\"IP.$numi = $san\\" >> $CONFIG\\n            let numi++\\n        else\\n            echo \\"DNS.$numd = $san\\" >> $CONFIG\\n            let numd++\\n        fi\\n    done\\nfi\\n\\necho \\"Fill in certificate data\\"\\nopenssl req -new -config $CONFIG -key $CN.key -out $CN.csr\\n\\nrm -f $CONFIG\\n\\necho \\"\\"\\necho \\"You may now run ./sign-server-cert.sh to get it signed\\"\\n```\\n\\n\\n\\n```bash\\n./new-server-cert.sh *.test.org\\n```\\n\\n\\n\\n## 3. \u7b7e\u53d1\u8bc1\u4e66\\n\\n`sign-server-cert.sh`\\n\\n```shell\\n#!/bin/bash\\n##\\n##  sign-server-cert.sh - sign using our root CA the server cert\\n##  Copyright (c) 2000 Yeak Nai Siew, All Rights Reserved.\\n##\\n\\nHASHALGO=\\"sha256\\"\\nVALID_DAYS=365\\nRANDOM_SRC=/dev/urandom\\n\\nCN=$1\\nif [ $# -ne 1 ]; then\\n    echo \\"Usage: $0 <www.domain.com>\\"\\n    exit 1\\nfi\\nif [ ! -f $CN.csr ]; then\\n    echo \\"No $CN.csr found. You must create that first.\\"\\n        exit 1\\nfi\\n# Check for root CA key\\nif [ ! -f ca.key -o ! -f ca.crt ]; then\\n        echo \\"You must have root CA key generated first.\\"\\n        exit 1\\nfi\\n\\n# Sign it with our CA key #\\n\\n#   make sure environment exists\\nif [ ! -d ca.db.certs ]; then\\n    mkdir ca.db.certs\\nfi\\nif [ ! -f ca.db.serial ]; then\\n    echo \'01\' >ca.db.serial\\nfi\\nif [ ! -f ca.db.index ]; then\\n    cp /dev/null ca.db.index\\nfi\\n\\n\\n#  create the CA requirement to sign the cert\\ncat >ca.config <<EOT\\n[ ca ]\\ndefault_ca              = default_CA\\n[ default_CA ]\\ndir                     = .\\ncerts                   = \\\\$dir\\nnew_certs_dir           = \\\\$dir/ca.db.certs\\ndatabase                = \\\\$dir/ca.db.index\\nserial                  = \\\\$dir/ca.db.serial\\nRANDFILE                = ${RANDOM_SRC}\\ncertificate             = \\\\$dir/ca.crt\\nprivate_key             = \\\\$dir/ca.key\\ndefault_days            = ${VALID_DAYS}\\ndefault_crl_days        = 30\\ndefault_md              = $HASHALGO\\npreserve                = no\\nx509_extensions         = server_cert\\npolicy                  = policy_anything\\n[ policy_anything ]\\ncountryName             = optional\\nstateOrProvinceName     = optional\\nlocalityName            = optional\\norganizationName        = optional\\norganizationalUnitName  = optional\\ncommonName              = supplied\\nemailAddress            = optional\\n[ server_cert ]\\n#subjectKeyIdentifier   = hash\\nauthorityKeyIdentifier  = keyid:always\\nextendedKeyUsage        = serverAuth,clientAuth,msSGC,nsSGC\\nbasicConstraints        = critical,CA:false\\n[req]\\ndefault_md              = $HASHALGO\\nreq_extensions          = v3_req\\n[ v3_req ]\\nextendedKeyUsage        = serverAuth, clientAuth\\nEOT\\n\\n# Test for Subject Alternate Names\\nsubjaltnames=\\"`openssl req -text -noout -in $CN.csr | sed -e \'s/^ *//\' | grep -A1 \'X509v3 Subject Alternative Name:\' | tail -1 | sed -e \'s/IP Address:/IP:/g\'`\\"\\nif [ \\"$subjaltnames\\" != \\"\\" ]; then\\n    echo \\"Found subject alternate names: $subjaltnames\\"\\n    echo \\"\\"\\n    echo \\"subjectAltName          = $subjaltnames\\" >> ca.config\\nfi\\n\\n#  revoke an existing old certificate\\nif [ -f $CN.crt ]; then\\n    echo \\"Revoking current certificate: $CN.crt\\"\\n    openssl ca -revoke $CN.crt -config ca.config\\nfi\\n\\n#  sign the certificate\\necho \\"CA signing: $CN.csr -> $CN.crt:\\"\\nopenssl ca -config ca.config -extensions v3_req -out $CN.crt -infiles $CN.csr\\necho \\"\\"\\necho \\"CA verifying: $CN.crt <-> CA cert\\"\\nopenssl verify -CAfile ca.crt $CN.crt\\necho \\"\\"\\n\\n#  cleanup after SSLeay\\nrm -f ca.config\\nrm -f ca.db.serial.old\\nrm -f ca.db.index.old\\n```\\n\\n\\n\\n```bash\\n./sign-server-cert.sh *.test.org\\n```\\n\\n\\n\\n**\u7b7e\u53d1\u8bc1\u4e66\u65f6, \u9700\u8981\u8f93\u5165\u521b\u5efa\u6839\u8bc1\u4e66\u65f6\u8bbe\u7f6e\u7684\u5bc6\u7801**\\n\\n\\n\\n## 4. \u4f7f\u7528\\n\\n\u7b7e\u53d1\u8bc1\u4e66\u540e,  \u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210  `*.test.org.key` \u548c `*.test.org.crt` \u4e24\u4e2a\u6587\u4ef6,  \u5728nginx\u4e2d\u914d\u7f6e\u540e\u5373\u53ef\u4f7f\u7528"},{"id":"/2019/11/08/npm","metadata":{"permalink":"/blog/2019/11/08/npm","editUrl":"https://github.com/chriy/chriy.github.io/blog/2019-11-08-npm.md","source":"@site/blog/2019-11-08-npm.md","title":"npm\u7684\u4f7f\u7528\u65b9\u6cd5","description":"\u4ec0\u4e48\u662fnpm","date":"2019-11-08T00:00:00.000Z","formattedDate":"November 8, 2019","tags":[],"readingTime":1.815,"truncated":false,"authors":[],"frontMatter":{"title":"npm\u7684\u4f7f\u7528\u65b9\u6cd5"},"prevItem":{"title":"OpenSSL\u81ea\u7b7e\u540d\u8bc1\u4e66","permalink":"/blog/2021/11/07/openssl"}},"content":"### \u4ec0\u4e48\u662fnpm\\n\u4e00\u3001npm\u662f\u4e00\u4e2a\u5305\u7ba1\u7406\u5de5\u5177,\u7c7b\u4f3c\u540e\u7aef\u7684 maven, gradle\\n\\n> \u9996\u5148\uff0c\u9700\u8981\u4f7f\u7528npm\u5c31\u5f97\u5148\u5b89\u88c5nodejs\uff0c\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u5462\uff0cnodejs\u662f\u4f1a\u81ea\u5e26 npm \u7684\u3002\\n\\n- npm \u5b89\u88c5\u7684\u4f9d\u8d56\u90fd\u4f1a\u4e0b\u8f7d\u5230 node_modules\u76ee\u5f55\u4e0b\u9762\\n\\n### \u5982\u679c\u521b\u5efapackage.json?\\n\\n> \u521d\u59cb\u5316\u4e00\u4e2apackage.json\\n\\n```shell\\nnpm init -y   npm init --yes \\n```\\n\\n```json\\n{\\n  \\"name\\": \\"\\",\\n  \\"version\\": \\"1.0.0\\",\\n  \\"description\\": \\"\\",\\n  \\"main\\": \\"index.js\\",\\n  \\"scripts\\": {\\n    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",\\n    \\"hello\\": \\"hello world\\"\\n  },\\n  \\"keywords\\": [],\\n  \\"author\\": \\"\\",\\n  \\"license\\": \\"MIT\\"\\n}\\n```\\n\\npackage.json \u8fd9\u662f\u4e00\u4e2ajson\u6587\u4ef6\uff0c\u7528\u6765\u7ba1\u7406\u8fd9\u4e9b\u5305\u7684\u7248\u672c\u548c\u4e00\u4e9b\u4f9d\u8d56\u5173\u7cfb\uff0c\u5f53\u9879\u76ee\u4e2d\u7f3a\u5c11 node_modules\u76ee\u5f55\u65f6\uff0c\u6267\u884c `npm install` \u6216 `npm i` \u8fd9\u4e9b \u4f9d\u8d56\u5c31\u4f1a\u4e00\u4e2a\u4e00\u4e2a\u7684\u4e0b\u8f7d\u4e0b\u6765\\n\\n**script \u4e2d\u5b9a\u4e49\u7684 \u547d\u4ee4 \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u8fd0\u884c**\\n\\n```bash\\nnpm run hello\\n```\\n\\n### \u914d\u7f6e\u9ed8\u8ba4\u7684 package.json\\n\\n```bash\\nnpm set init.license \'MIT\'\\nnpm set init.author \'xxx\'\\n...\\n```\\n\\n### \u5b89\u88c5 - \u5378\u8f7d - \u66f4\u65b0\\n\\n```bash\\n#\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u5747\u53ef\u5b89\u88c5\\nnpm i vue   \\nnpm install vue #\u5b89\u88c5\u4e00\u4e2a\u4f9d\u8d56\uff0c\u8fd9\u4e2a\u547d\u4ee4\u80fd\u76f4\u63a5\u628a\u5305\u4e0b\u8f7d\u4e0b\u6765\uff0c\u653e\u5728node_modules\u76ee\u5f55\u4e0b\\n\\n#\u6307\u5b9a\u7248\u672c\u5b89\u88c5\\nnpm i jquery@3.0.0\\n\\n#\u5b89\u88c5\u5f00\u53d1\u7248\u672c\\nnpm i --save-dev vue #\u8fd9\u79cd\u5b89\u88c5\u65b9\u5f0f\u5c06\u53ea\u4f1a\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u7528\u5230\uff0c\u751f\u6210\u73af\u5883\u4e0d\u4f1a\\n\\n#\u5378\u8f7d\u4f9d\u8d56\\nnpm uninstall vue \\n\\n#\u5982\u679c\u9700\u8981\u4ecepackage.json\u4e2d\u5220\u9664\u4f9d\u8d56\uff0c\u9700\u8981\u52a0\u4e0a --save\u53c2\u6570\\nnpm uninstall --save lodash\\n\\n#\u66f4\u65b0\u4f9d\u8d56\\nnpm update vue\\n\\n```\\n\\n## npm \u81ea\u8eab\u5347\u7ea7\\n\\n```bash\\nnpm install npm@latest -g\\n```"}]}')}}]);